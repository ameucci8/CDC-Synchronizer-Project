# vsim -L work work.soc_async_prime_tb 
# Start time: 13:21:40 on Dec 04,2024
# Loading sv_std.std
# Loading work.soc_async_prime_tb
# Loading work.soc_async
# Loading work.processor
# Loading work.register
# Loading work.adder_n_bit
# Loading work.overflow
# Loading work.rom
# Loading work.mux_N_bit_length
# Loading work.control_unit
# Loading work.mux_2_to_1
# Loading work.register_files
# Loading work.decoder_logN_to_N
# Loading work.sign_extend
# Loading work.alu
# Loading work.subtractor
# Loading work.nand_op
# Loading work.nor_op
# Loading work.and_op
# Loading work.or_op
# Loading work.xor_op
# Loading work.not_op
# Loading work.shift_left_op
# Loading work.or_n_to_1
# Loading work.shift_right_op
# Loading work.rotate_left_op
# Loading work.rotate_right_op
# Loading work.shift_right_arith_op
# Loading work.less_than
# Loading work.less_than_unsigned
# Loading work.mux
# Loading work.mux_16_to_1
# Loading work.mux_8_to_1
# Loading work.mux_4_to_1
# Loading work.branch_control_unit
# Loading work.asynchronous_fifo
# Loading work.fifo_write_pointer_full
# Loading work.gray_to_binary
# Loading work.binary_to_gray
# Loading work.fifo_read_pointer_empty
# Loading work.fifo_memory
# Loading work.memory_controller
# Loading work.ram
# Loading work.full_adder
# Loading work.d_latch
# Loading work.decoder_submodule
# Loading work.shift_left_1_bit
# Loading work.shift_right_1_bit
# Loading work.rotate_left_1_bit
# Loading work.rotate_right_1_bit
# Loading work.shift_right_arith_1_bit
# Loading work.mux_submodule
# Loading work.tristate_buffer
# Loading work.decoder_1_to_2
# Loading work.tristate_buffer_1_bit
# ** Warning: Design size of 28762 instances exceeds ModelSim - Intel FPGA Starter Edition recommended capacity.
# This may because you are loading cell libraries which are not recommended with
# the ModelSim - Intel FPGA Edition. Expect performance to be adversely affected.
add wave -position insertpoint sim:/soc_async_prime_tb/*
run -all
# rom_address =   x 
# instruction = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# 
# ALU opcode = xxxx 
# branch valid = x 
# branch type = xx | zero flag = x | sign flag = x | branch = x
# jump dst = x | pc next = xxxxxxxx 
#  reg_write_data = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | reg_write_enable = x 
# alu a = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# alu b = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# alu data out (mem addr) = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
#  mem write data = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
#  
# reg file 0 = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# reg file 1 = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# reg file 2 = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# reg file 3 = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# reg file 4 = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# reg file 5 = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# reg file 6 = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# reg file 7 = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# reg file 31 = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
#  
# memory 0: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# memory 1: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# memory 2: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# memory 3: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# memory 4: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# memory 5: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# memory 6: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# memory 7: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# memory 8: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
#  
#  Async FIFO (p_to_ram): 
#  w_en = x | r_en = 0 | reset 0 | write_data = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# read_data = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | fifo_full = x | fifo_empty = x
#  
# Async FIFO (ram_to_p): 
#  w_en = x | r_en = 0 | reset 0 | write_data = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# read_data = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | fifo_full = x | fifo_empty = x
# 
# rom_address =   x 
# instruction = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# 
# ALU opcode = xxxx 
# branch valid = x 
# branch type = xx | zero flag = x | sign flag = x | branch = x
# jump dst = x | pc next = xxxxxxxx 
#  reg_write_data = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | reg_write_enable = x 
# alu a = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# alu b = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# alu data out (mem addr) = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
#  mem write data = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
#  
# reg file 0 = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# reg file 1 = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# reg file 2 = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# reg file 3 = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# reg file 4 = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# reg file 5 = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# reg file 6 = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# reg file 7 = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# reg file 31 = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
#  
# memory 0: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# memory 1: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# memory 2: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# memory 3: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# memory 4: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# memory 5: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# memory 6: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# memory 7: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# memory 8: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
#  
#  Async FIFO (p_to_ram): 
#  w_en = x | r_en = 0 | reset 0 | write_data = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# read_data = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | fifo_full = x | fifo_empty = x
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 0 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | fifo_full = x | fifo_empty = x
# 
# rom_address =   0 
# instruction = 00100000000000000000000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00000001 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000000000 
# reg file 2 = 00000000000000000000000000000000 
# reg file 3 = 00000000000000000000000000000000 
# reg file 4 = 00000000000000000000000000000000 
# reg file 5 = 00000000000000000000000000000000 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000000 
#  
# memory 0: 00000000000000000000000000000000 
# memory 1: 00000000000000000000000000000000 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 0 | reset 1 | write_data = 00000000000000000000000000000000000000000 
# read_data = 00000000000000000000000000000000000000000 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 0 | reset 1 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000000000 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   0 
# instruction = 00100000000000000000000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00000001 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000000000 
# reg file 2 = 00000000000000000000000000000000 
# reg file 3 = 00000000000000000000000000000000 
# reg file 4 = 00000000000000000000000000000000 
# reg file 5 = 00000000000000000000000000000000 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000000 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000000 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 00000000000000000000000000000000000000000 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000000000 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   1 
# instruction = 10001100000000010000000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00000010 
#  reg_write_data = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000000000 
# reg file 2 = 00000000000000000000000000000000 
# reg file 3 = 00000000000000000000000000000000 
# reg file 4 = 00000000000000000000000000000000 
# reg file 5 = 00000000000000000000000000000000 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000000 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000000 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 1 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 00000000000000000000000000000000000000000 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000000000 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   1 
# instruction = 10001100000000010000000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00000010 
#  reg_write_data = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# reg file 2 = 00000000000000000000000000000000 
# reg file 3 = 00000000000000000000000000000000 
# reg file 4 = 00000000000000000000000000000000 
# reg file 5 = 00000000000000000000000000000000 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000000 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000000 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 1 | r_en = 1 | reset 0 | write_data = 000000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# read_data = 00000000000000000000000000000000000000000 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000000000 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   1 
# instruction = 10001100000000010000000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00000010 
#  reg_write_data = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# reg file 2 = 00000000000000000000000000000000 
# reg file 3 = 00000000000000000000000000000000 
# reg file 4 = 00000000000000000000000000000000 
# reg file 5 = 00000000000000000000000000000000 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000000 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000000 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 1 | r_en = 1 | reset 0 | write_data = 000000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# read_data = 00000000000000000000000000000000000000000 | fifo_full = 0 | fifo_empty = 0
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000000000 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   1 
# instruction = 10001100000000010000000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00000010 
#  reg_write_data = 00000000000000000000000000001010 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# reg file 2 = 00000000000000000000000000000000 
# reg file 3 = 00000000000000000000000000000000 
# reg file 4 = 00000000000000000000000000000000 
# reg file 5 = 00000000000000000000000000000000 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000000 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000000 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 1 | r_en = 1 | reset 0 | write_data = 000000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
# read_data = 00000000000000000000000000000000000000000 | fifo_full = 0 | fifo_empty = 0
#  
# Async FIFO (ram_to_p): 
#  w_en = 1 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000001010 
# read_data = 00000000000000000000000000000000 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   1 
# instruction = 10001100000000010000000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00000010 
#  reg_write_data = 00000000000000000000000000001010 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000001010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000000 
# reg file 3 = 00000000000000000000000000000000 
# reg file 4 = 00000000000000000000000000000000 
# reg file 5 = 00000000000000000000000000000000 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000000 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000000 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 1 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000001010 
# read_data = 00000000000000000000000000000000000000000 | fifo_full = 0 | fifo_empty = 0
#  
# Async FIFO (ram_to_p): 
#  w_en = 1 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000001010 
# read_data = 00000000000000000000000000000000 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   1 
# instruction = 10001100000000010000000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00000010 
#  reg_write_data = 00000000000000000000000000001010 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000001010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000000 
# reg file 3 = 00000000000000000000000000000000 
# reg file 4 = 00000000000000000000000000000000 
# reg file 5 = 00000000000000000000000000000000 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000000 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000000 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 1 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000001010 
# read_data = 000000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | fifo_full = 0 | fifo_empty = 0
#  
# Async FIFO (ram_to_p): 
#  w_en = 1 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000001010 
# read_data = 00000000000000000000000000000000 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   1 
# instruction = 10001100000000010000000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00000010 
#  reg_write_data = 00000000000000000000000000001010 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000001010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000000 
# reg file 3 = 00000000000000000000000000000000 
# reg file 4 = 00000000000000000000000000000000 
# reg file 5 = 00000000000000000000000000000000 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000000 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000000 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 1 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000001010 
# read_data = 000000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | fifo_full = 0 | fifo_empty = 0
#  
# Async FIFO (ram_to_p): 
#  w_en = 1 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000001010 
# read_data = 00000000000000000000000000000000 | fifo_full = 0 | fifo_empty = 0
# 
# rom_address =   1 
# instruction = 10001100000000010000000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00000010 
#  reg_write_data = 00000000000000000000000000001010 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000001010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000000 
# reg file 3 = 00000000000000000000000000000000 
# reg file 4 = 00000000000000000000000000000000 
# reg file 5 = 00000000000000000000000000000000 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000000 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000000 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 1 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000001010 
# read_data = 000000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | fifo_full = 1 | fifo_empty = 0
#  
# Async FIFO (ram_to_p): 
#  w_en = 1 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000001010 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   2 
# instruction = 00100000000000100000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00000011 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000000 
# reg file 3 = 00000000000000000000000000000000 
# reg file 4 = 00000000000000000000000000000000 
# reg file 5 = 00000000000000000000000000000000 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000000 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000000 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000000 
# read_data = 000000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | fifo_full = 0 | fifo_empty = 0
#  
# Async FIFO (ram_to_p): 
#  w_en = 1 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000001010 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 0
# 
# rom_address =   3 
# instruction = 00100000000000110000000000000010 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00000100 
#  reg_write_data = 00000000000000000000000000000010 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000010 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000001 
# reg file 3 = 00000000000000000000000000000000 
# reg file 4 = 00000000000000000000000000000000 
# reg file 5 = 00000000000000000000000000000000 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000000 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000000 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001000000000000000000000000000000000 
# read_data = 000000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | fifo_full = 0 | fifo_empty = 0
#  
# Async FIFO (ram_to_p): 
#  w_en = 1 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000001010 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 0
# 
# rom_address =   4 
# instruction = 00100000001001000000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00000101 
#  reg_write_data = 00000000000000000000000000001011 | reg_write_enable = 1 
# alu a = 00000000000000000000000000001010 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000001011 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000001 
# reg file 3 = 00000000000000000000000000000010 
# reg file 4 = 00000000000000000000000000000000 
# reg file 5 = 00000000000000000000000000000000 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000000 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000000 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000101100000000000000000000000000000000 
# read_data = 000000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | fifo_full = 0 | fifo_empty = 0
#  
# Async FIFO (ram_to_p): 
#  w_en = 1 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000001010 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   5 
# instruction = 00010000100000110000000000001100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00000110 
#  reg_write_data = 00000000000000000000000000001001 | reg_write_enable = 0 
# alu a = 00000000000000000000000000001011 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000001001 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000001 
# reg file 3 = 00000000000000000000000000000010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000000 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000000 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000000 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000100100000000000000000000000000000010 
# read_data = 000000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | fifo_full = 0 | fifo_empty = 0
#  
# Async FIFO (ram_to_p): 
#  w_en = 1 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000001010 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 0
# 
# rom_address =   6 
# instruction = 00001100000111110000000000110010 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 1 | pc next = 00110010 
#  reg_write_data = 00000000000000000000000000000110 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000110010 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000001 
# reg file 3 = 00000000000000000000000000000010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000000 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000000 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000000 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 000000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | fifo_full = 0 | fifo_empty = 0
#  
# Async FIFO (ram_to_p): 
#  w_en = 1 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000001010 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   6 
# instruction = 00001100000111110000000000110010 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 1 | pc next = 00110010 
#  reg_write_data = 00000000000000000000000000000110 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000110010 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000001 
# reg file 3 = 00000000000000000000000000000010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000000 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000000 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000000 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 00000000000000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 0
#  
# Async FIFO (ram_to_p): 
#  w_en = 1 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000001010 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  50 
# instruction = 00100000000001010000000000000010 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110011 
#  reg_write_data = 00000000000000000000000000000010 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000010 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000001 
# reg file 3 = 00000000000000000000000000000010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000000 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000000 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001000000000000000000000000000000000 
# read_data = 00000000000000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 0
#  
# Async FIFO (ram_to_p): 
#  w_en = 1 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000001010 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 0
# 
# rom_address =  51 
# instruction = 00100000000001110000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110100 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000001 
# reg file 3 = 00000000000000000000000000000010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000000 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000000 
# read_data = 00000000000000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 0
#  
# Async FIFO (ram_to_p): 
#  w_en = 1 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000001010 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 0
# 
# rom_address =  52 
# instruction = 00100000000001100000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110101 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000001 
# reg file 3 = 00000000000000000000000000000010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000000 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000000 
# read_data = 00000000000000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 0
#  
# Async FIFO (ram_to_p): 
#  w_en = 1 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000001010 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  53 
# instruction = 00010000101000110000000000111100 
# 
# ALU opcode = 0001 
# branch valid = 1 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00111100 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000010 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000001 
# reg file 3 = 00000000000000000000000000000010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000000 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000010 
# read_data = 00000000000000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 0
#  
# Async FIFO (ram_to_p): 
#  w_en = 1 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000001010 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 0
# 
# rom_address =  60 
# instruction = 00010100000001100000000000111110 
# 
# ALU opcode = 0001 
# branch valid = 1 
# branch type = 01 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00111110 
#  reg_write_data = 11111111111111111111111111111111 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 11111111111111111111111111111111 
#  mem write data = 00000000000000000000000000000001 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000001 
# reg file 3 = 00000000000000000000000000000010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000000 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111111100000000000000000000000000000001 
# read_data = 00000000000000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 0
#  
# Async FIFO (ram_to_p): 
#  w_en = 1 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000001010 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  60 
# instruction = 00010100000001100000000000111110 
# 
# ALU opcode = 0001 
# branch valid = 1 
# branch type = 01 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00111110 
#  reg_write_data = 11111111111111111111111111111111 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 11111111111111111111111111111111 
#  mem write data = 00000000000000000000000000000001 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000001 
# reg file 3 = 00000000000000000000000000000010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000000 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111111100000000000000000000000000000001 
# read_data = 00000000000000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 1 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000001010 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  62 
# instruction = 00111011111111100000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00000111 
#  reg_write_data = 00000000000000000000000000000111 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000110 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000111 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000001 
# reg file 3 = 00000000000000000000000000000010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000000 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000011100000000000000000000000000000000 
# read_data = 00000000000000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 1 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000001010 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 0
# 
# rom_address =   7 
# instruction = 00010000111000000000000000001010 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00001000 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000001 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000001 
# reg file 3 = 00000000000000000000000000000010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000000 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000000 
# read_data = 00000000000000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 1 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000001010 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 0
# 
# rom_address =   7 
# instruction = 00010000111000000000000000001010 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00001000 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000001 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000001 
# reg file 3 = 00000000000000000000000000000010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000000 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000000 
# read_data = 00000000000000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 0
# 
# rom_address =   8 
# instruction = 10101100010000110000000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00001001 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000001 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000001 
# reg file 3 = 00000000000000000000000000000010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000000 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 1 | r_en = 1 | reset 0 | write_data = 10000000100000000000000000000000000000010 
# read_data = 00000000000000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   9 
# instruction = 00100000010000100000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00001010 
#  reg_write_data = 00000000000000000000000000000010 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000001 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000010 
#  mem write data = 00000000000000000000000000000001 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000001 
# reg file 3 = 00000000000000000000000000000010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000000 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001000000000000000000000000000000001 
# read_data = 00000000000000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 0
# 
# rom_address =  10 
# instruction = 00100000011000110000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00001011 
#  reg_write_data = 00000000000000000000000000000011 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000010 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000011 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000010 
# reg file 3 = 00000000000000000000000000000010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000000 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001100000000000000000000000000000010 
# read_data = 00000000000000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  11 
# instruction = 00001000000000000000000000000101 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00000101 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000010 
# reg file 3 = 00000000000000000000000000000011 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000000 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 00000000000000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   5 
# instruction = 00010000100000110000000000001100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00000110 
#  reg_write_data = 00000000000000000000000000001000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000001011 
# alu b = 00000000000000000000000000000011 
# alu data out (mem addr) = 00000000000000000000000000001000 
#  mem write data = 00000000000000000000000000000011 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000010 
# reg file 3 = 00000000000000000000000000000011 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000000 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000100000000000000000000000000000000011 
# read_data = 00000000000000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   5 
# instruction = 00010000100000110000000000001100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00000110 
#  reg_write_data = 00000000000000000000000000001000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000001011 
# alu b = 00000000000000000000000000000011 
# alu data out (mem addr) = 00000000000000000000000000001000 
#  mem write data = 00000000000000000000000000000011 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000010 
# reg file 3 = 00000000000000000000000000000011 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000000 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000100000000000000000000000000000000011 
# read_data = 00000000000000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 0
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   6 
# instruction = 00001100000111110000000000110010 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 1 | pc next = 00110010 
#  reg_write_data = 00000000000000000000000000000110 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000110010 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000110 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000010 
# reg file 3 = 00000000000000000000000000000011 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000000 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000110 
# read_data = 00000000000000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 0
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  50 
# instruction = 00100000000001010000000000000010 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110011 
#  reg_write_data = 00000000000000000000000000000010 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000010 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000010 
# reg file 3 = 00000000000000000000000000000011 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000000 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001000000000000000000000000000000010 
# read_data = 10000000100000000000000000000000000000010 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  51 
# instruction = 00100000000001110000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110100 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000001 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000010 
# reg file 3 = 00000000000000000000000000000011 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000000 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000001 
# read_data = 10000000100000000000000000000000000000010 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  51 
# instruction = 00100000000001110000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110100 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000001 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000010 
# reg file 3 = 00000000000000000000000000000011 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000001 
# read_data = 10000000100000000000000000000000000000010 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  52 
# instruction = 00100000000001100000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110101 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000001 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000010 
# reg file 3 = 00000000000000000000000000000011 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000001 
# read_data = 10000000100000000000000000000000000000010 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  53 
# instruction = 00010000101000110000000000111100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00110110 
#  reg_write_data = 11111111111111111111111111111111 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000010 
# alu b = 00000000000000000000000000000011 
# alu data out (mem addr) = 11111111111111111111111111111111 
#  mem write data = 00000000000000000000000000000011 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000010 
# reg file 3 = 00000000000000000000000000000011 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111111100000000000000000000000000000011 
# read_data = 10000000100000000000000000000000000000010 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  54 
# instruction = 00000000000000110011000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000011 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000011 
# alu data out (mem addr) = 00000000000000000000000000000011 
#  mem write data = 00000000000000000000000000000011 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000010 
# reg file 3 = 00000000000000000000000000000011 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001100000000000000000000000000000011 
# read_data = 10000000100000000000000000000000000000010 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000011 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000010 
# reg file 3 = 00000000000000000000000000000011 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000011
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000010 
# read_data = 10000000100000000000000000000000000000010 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 1 
# branch type = 11 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000001 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000010 
# reg file 3 = 00000000000000000000000000000011 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000000 
# read_data = 10000000100000000000000000000000000000010 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 11111111111111111111111111111111 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000001 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 11111111111111111111111111111111 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000010 
# reg file 3 = 00000000000000000000000000000011 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111111100000000000000000000000000000010 
# read_data = 10000000100000000000000000000000000000010 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 11 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00111001 
#  reg_write_data = 11111111111111111111111111111111 | reg_write_enable = 0 
# alu a = 11111111111111111111111111111111 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 11111111111111111111111111111111 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000010 
# reg file 3 = 00000000000000000000000000000011 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 11111111111111111111111111111111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111111100000000000000000000000000000000 
# read_data = 10000000100000000000000000000000000000010 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  57 
# instruction = 00010000110000000000000000111100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00111010 
#  reg_write_data = 11111111111111111111111111111111 | reg_write_enable = 0 
# alu a = 11111111111111111111111111111111 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 11111111111111111111111111111111 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000010 
# reg file 3 = 00000000000000000000000000000011 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 11111111111111111111111111111111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111111100000000000000000000000000000000 
# read_data = 10000000100000000000000000000000000000010 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  58 
# instruction = 00100000101001010000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111011 
#  reg_write_data = 00000000000000000000000000000011 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000010 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000011 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000010 
# reg file 3 = 00000000000000000000000000000011 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 11111111111111111111111111111111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001100000000000000000000000000000010 
# read_data = 10000000100000000000000000000000000000010 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  59 
# instruction = 00001000000000000000000000110100 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110100 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000010 
# reg file 3 = 00000000000000000000000000000011 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 11111111111111111111111111111111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000000100000000000000000000000000000010 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  52 
# instruction = 00100000000001100000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110101 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 11111111111111111111111111111111 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000010 
# reg file 3 = 00000000000000000000000000000011 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 11111111111111111111111111111111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000111111111111111111111111111111111 
# read_data = 10000000100000000000000000000000000000010 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  53 
# instruction = 00010000101000110000000000111100 
# 
# ALU opcode = 0001 
# branch valid = 1 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00111100 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000011 
# alu b = 00000000000000000000000000000011 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000011 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000010 
# reg file 3 = 00000000000000000000000000000011 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000011 
# read_data = 10000000100000000000000000000000000000010 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  60 
# instruction = 00010100000001100000000000111110 
# 
# ALU opcode = 0001 
# branch valid = 1 
# branch type = 01 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00111110 
#  reg_write_data = 11111111111111111111111111111111 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 11111111111111111111111111111111 
#  mem write data = 00000000000000000000000000000001 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000010 
# reg file 3 = 00000000000000000000000000000011 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111111100000000000000000000000000000001 
# read_data = 10000000100000000000000000000000000000010 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  62 
# instruction = 00111011111111100000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00000111 
#  reg_write_data = 00000000000000000000000000000111 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000110 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000111 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000010 
# reg file 3 = 00000000000000000000000000000011 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000011100000000000000000000000000000000 
# read_data = 10000000100000000000000000000000000000010 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   7 
# instruction = 00010000111000000000000000001010 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00001000 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000001 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000010 
# reg file 3 = 00000000000000000000000000000011 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000000 
# read_data = 10000000100000000000000000000000000000010 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   8 
# instruction = 10101100010000110000000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00001001 
#  reg_write_data = 00000000000000000000000000000010 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000010 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000010 
#  mem write data = 00000000000000000000000000000011 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000010 
# reg file 3 = 00000000000000000000000000000011 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 1 | r_en = 1 | reset 0 | write_data = 10000001000000000000000000000000000000011 
# read_data = 10000000100000000000000000000000000000010 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   9 
# instruction = 00100000010000100000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00001010 
#  reg_write_data = 00000000000000000000000000000011 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000010 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000011 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000010 
# reg file 3 = 00000000000000000000000000000011 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001100000000000000000000000000000010 
# read_data = 10000000100000000000000000000000000000010 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  10 
# instruction = 00100000011000110000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00001011 
#  reg_write_data = 00000000000000000000000000000100 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000011 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000100 
#  mem write data = 00000000000000000000000000000011 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000011 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000010000000000000000000000000000000011 
# read_data = 10000000100000000000000000000000000000010 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  11 
# instruction = 00001000000000000000000000000101 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00000101 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000100 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000000100000000000000000000000000000010 | fifo_full = 0 | fifo_empty = 0
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   5 
# instruction = 00010000100000110000000000001100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00000110 
#  reg_write_data = 00000000000000000000000000000111 | reg_write_enable = 0 
# alu a = 00000000000000000000000000001011 
# alu b = 00000000000000000000000000000100 
# alu data out (mem addr) = 00000000000000000000000000000111 
#  mem write data = 00000000000000000000000000000100 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000100 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000011100000000000000000000000000000100 
# read_data = 10000000100000000000000000000000000000010 | fifo_full = 0 | fifo_empty = 0
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   5 
# instruction = 00010000100000110000000000001100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00000110 
#  reg_write_data = 00000000000000000000000000000111 | reg_write_enable = 0 
# alu a = 00000000000000000000000000001011 
# alu b = 00000000000000000000000000000100 
# alu data out (mem addr) = 00000000000000000000000000000111 
#  mem write data = 00000000000000000000000000000100 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000100 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000011100000000000000000000000000000100 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   6 
# instruction = 00001100000111110000000000110010 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 1 | pc next = 00110010 
#  reg_write_data = 00000000000000000000000000000110 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000110010 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000110 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000100 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000110 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  50 
# instruction = 00100000000001010000000000000010 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110011 
#  reg_write_data = 00000000000000000000000000000010 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000010 
#  mem write data = 00000000000000000000000000000011 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000100 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000000 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001000000000000000000000000000000011 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  50 
# instruction = 00100000000001010000000000000010 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110011 
#  reg_write_data = 00000000000000000000000000000010 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000010 
#  mem write data = 00000000000000000000000000000011 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000100 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001000000000000000000000000000000011 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  51 
# instruction = 00100000000001110000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110100 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000001 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000100 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000001 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  52 
# instruction = 00100000000001100000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110101 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000001 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000100 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000001 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  53 
# instruction = 00010000101000110000000000111100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00110110 
#  reg_write_data = 11111111111111111111111111111110 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000010 
# alu b = 00000000000000000000000000000100 
# alu data out (mem addr) = 11111111111111111111111111111110 
#  mem write data = 00000000000000000000000000000100 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000100 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111111000000000000000000000000000000100 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  54 
# instruction = 00000000000000110011000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000100 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000100 
# alu data out (mem addr) = 00000000000000000000000000000100 
#  mem write data = 00000000000000000000000000000100 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000100 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000010000000000000000000000000000000100 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 00000000000000000000000000000010 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000100 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000010 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000100 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000100
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001000000000000000000000000000000010 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 1 
# branch type = 11 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000010 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000010 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000010 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000100 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000010
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001000000000000000000000000000000000 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000010 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000100 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000010
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000010 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 11 | zero flag = 1 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00111001 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000100 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  57 
# instruction = 00010000110000000000000000111100 
# 
# ALU opcode = 0001 
# branch valid = 1 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00111100 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000100 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  60 
# instruction = 00010100000001100000000000111110 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 01 | zero flag = 1 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00111101 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000100 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  61 
# instruction = 00100000000001110000000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111110 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000001 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000100 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000001 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  62 
# instruction = 00111011111111100000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00000111 
#  reg_write_data = 00000000000000000000000000000111 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000110 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000111 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000100 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000011100000000000000000000000000000000 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   7 
# instruction = 00010000111000000000000000001010 
# 
# ALU opcode = 0001 
# branch valid = 1 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00001010 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000100 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  10 
# instruction = 00100000011000110000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00001011 
#  reg_write_data = 00000000000000000000000000000101 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000100 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000101 
#  mem write data = 00000000000000000000000000000100 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000100 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000010100000000000000000000000000000100 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  11 
# instruction = 00001000000000000000000000000101 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00000101 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   5 
# instruction = 00010000100000110000000000001100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00000110 
#  reg_write_data = 00000000000000000000000000000110 | reg_write_enable = 0 
# alu a = 00000000000000000000000000001011 
# alu b = 00000000000000000000000000000101 
# alu data out (mem addr) = 00000000000000000000000000000110 
#  mem write data = 00000000000000000000000000000101 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000011000000000000000000000000000000101 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   6 
# instruction = 00001100000111110000000000110010 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 1 | pc next = 00110010 
#  reg_write_data = 00000000000000000000000000000110 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000110010 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000110 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000110 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  50 
# instruction = 00100000000001010000000000000010 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110011 
#  reg_write_data = 00000000000000000000000000000010 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000010 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001000000000000000000000000000000010 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  51 
# instruction = 00100000000001110000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110100 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000000 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  52 
# instruction = 00100000000001100000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110101 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000000 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  53 
# instruction = 00010000101000110000000000111100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00110110 
#  reg_write_data = 11111111111111111111111111111101 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000010 
# alu b = 00000000000000000000000000000101 
# alu data out (mem addr) = 11111111111111111111111111111101 
#  mem write data = 00000000000000000000000000000101 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111110100000000000000000000000000000101 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  54 
# instruction = 00000000000000110011000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000101 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000101 
# alu data out (mem addr) = 00000000000000000000000000000101 
#  mem write data = 00000000000000000000000000000101 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000010100000000000000000000000000000101 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 00000000000000000000000000000011 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000101 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000011 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000101
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001100000000000000000000000000000010 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 1 
# branch type = 11 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000011 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000011 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000011 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000011
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001100000000000000000000000000000000 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000011 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000011
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000010 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 1 
# branch type = 11 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000001 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000000 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 11111111111111111111111111111111 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000001 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 11111111111111111111111111111111 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111111100000000000000000000000000000010 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 11 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00111001 
#  reg_write_data = 11111111111111111111111111111111 | reg_write_enable = 0 
# alu a = 11111111111111111111111111111111 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 11111111111111111111111111111111 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 11111111111111111111111111111111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111111100000000000000000000000000000000 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  57 
# instruction = 00010000110000000000000000111100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00111010 
#  reg_write_data = 11111111111111111111111111111111 | reg_write_enable = 0 
# alu a = 11111111111111111111111111111111 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 11111111111111111111111111111111 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 11111111111111111111111111111111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111111100000000000000000000000000000000 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  58 
# instruction = 00100000101001010000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111011 
#  reg_write_data = 00000000000000000000000000000011 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000010 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000011 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 11111111111111111111111111111111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001100000000000000000000000000000010 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  59 
# instruction = 00001000000000000000000000110100 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110100 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 11111111111111111111111111111111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  52 
# instruction = 00100000000001100000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110101 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 11111111111111111111111111111111 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 11111111111111111111111111111111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000111111111111111111111111111111111 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  53 
# instruction = 00010000101000110000000000111100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00110110 
#  reg_write_data = 11111111111111111111111111111110 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000011 
# alu b = 00000000000000000000000000000101 
# alu data out (mem addr) = 11111111111111111111111111111110 
#  mem write data = 00000000000000000000000000000101 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111111000000000000000000000000000000101 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  54 
# instruction = 00000000000000110011000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000101 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000101 
# alu data out (mem addr) = 00000000000000000000000000000101 
#  mem write data = 00000000000000000000000000000101 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000010100000000000000000000000000000101 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 00000000000000000000000000000010 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000101 
# alu b = 00000000000000000000000000000011 
# alu data out (mem addr) = 00000000000000000000000000000010 
#  mem write data = 00000000000000000000000000000011 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000101
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001000000000000000000000000000000011 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 1 
# branch type = 11 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000010 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000010 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000010 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000010
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001000000000000000000000000000000000 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 11111111111111111111111111111111 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000010 
# alu b = 00000000000000000000000000000011 
# alu data out (mem addr) = 11111111111111111111111111111111 
#  mem write data = 00000000000000000000000000000011 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000010
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111111100000000000000000000000000000011 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 11 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00111001 
#  reg_write_data = 11111111111111111111111111111111 | reg_write_enable = 0 
# alu a = 11111111111111111111111111111111 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 11111111111111111111111111111111 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 11111111111111111111111111111111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111111100000000000000000000000000000000 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  57 
# instruction = 00010000110000000000000000111100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00111010 
#  reg_write_data = 11111111111111111111111111111111 | reg_write_enable = 0 
# alu a = 11111111111111111111111111111111 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 11111111111111111111111111111111 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 11111111111111111111111111111111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111111100000000000000000000000000000000 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  58 
# instruction = 00100000101001010000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111011 
#  reg_write_data = 00000000000000000000000000000100 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000011 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000100 
#  mem write data = 00000000000000000000000000000011 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 11111111111111111111111111111111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000010000000000000000000000000000000011 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  59 
# instruction = 00001000000000000000000000110100 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110100 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000100 
# reg file 6 = 11111111111111111111111111111111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  52 
# instruction = 00100000000001100000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110101 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 11111111111111111111111111111111 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000100 
# reg file 6 = 11111111111111111111111111111111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000111111111111111111111111111111111 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  53 
# instruction = 00010000101000110000000000111100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00110110 
#  reg_write_data = 11111111111111111111111111111111 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000100 
# alu b = 00000000000000000000000000000101 
# alu data out (mem addr) = 11111111111111111111111111111111 
#  mem write data = 00000000000000000000000000000101 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000100 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111111100000000000000000000000000000101 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  54 
# instruction = 00000000000000110011000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000101 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000101 
# alu data out (mem addr) = 00000000000000000000000000000101 
#  mem write data = 00000000000000000000000000000101 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000100 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000010100000000000000000000000000000101 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000101 
# alu b = 00000000000000000000000000000100 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000100 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000100 
# reg file 6 = 00000000000000000000000000000101
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000100 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 1 
# branch type = 11 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000001 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000100 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000000 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 11111111111111111111111111111101 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000001 
# alu b = 00000000000000000000000000000100 
# alu data out (mem addr) = 11111111111111111111111111111101 
#  mem write data = 00000000000000000000000000000100 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000100 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111110100000000000000000000000000000100 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 11 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00111001 
#  reg_write_data = 11111111111111111111111111111101 | reg_write_enable = 0 
# alu a = 11111111111111111111111111111101 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 11111111111111111111111111111101 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000100 
# reg file 6 = 11111111111111111111111111111101
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111110100000000000000000000000000000000 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  57 
# instruction = 00010000110000000000000000111100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00111010 
#  reg_write_data = 11111111111111111111111111111101 | reg_write_enable = 0 
# alu a = 11111111111111111111111111111101 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 11111111111111111111111111111101 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000100 
# reg file 6 = 11111111111111111111111111111101
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111110100000000000000000000000000000000 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  58 
# instruction = 00100000101001010000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111011 
#  reg_write_data = 00000000000000000000000000000101 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000100 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000101 
#  mem write data = 00000000000000000000000000000100 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000100 
# reg file 6 = 11111111111111111111111111111101
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000010100000000000000000000000000000100 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  59 
# instruction = 00001000000000000000000000110100 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110100 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000101 
# reg file 6 = 11111111111111111111111111111101
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  52 
# instruction = 00100000000001100000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110101 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 11111111111111111111111111111101 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000101 
# reg file 6 = 11111111111111111111111111111101
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000111111111111111111111111111111101 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  53 
# instruction = 00010000101000110000000000111100 
# 
# ALU opcode = 0001 
# branch valid = 1 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00111100 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000101 
# alu b = 00000000000000000000000000000101 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000101 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000101 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000101 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  60 
# instruction = 00010100000001100000000000111110 
# 
# ALU opcode = 0001 
# branch valid = 1 
# branch type = 01 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00111110 
#  reg_write_data = 11111111111111111111111111111111 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 11111111111111111111111111111111 
#  mem write data = 00000000000000000000000000000001 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000101 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111111100000000000000000000000000000001 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  62 
# instruction = 00111011111111100000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00000111 
#  reg_write_data = 00000000000000000000000000000111 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000110 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000111 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000101 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000011100000000000000000000000000000000 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   7 
# instruction = 00010000111000000000000000001010 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00001000 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000001 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000101 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000000 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   8 
# instruction = 10101100010000110000000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00001001 
#  reg_write_data = 00000000000000000000000000000011 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000011 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000011 
#  mem write data = 00000000000000000000000000000101 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000101 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 1 | r_en = 1 | reset 0 | write_data = 10000001100000000000000000000000000000101 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   9 
# instruction = 00100000010000100000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00001010 
#  reg_write_data = 00000000000000000000000000000100 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000011 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000100 
#  mem write data = 00000000000000000000000000000011 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000011 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000101 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000010000000000000000000000000000000011 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  10 
# instruction = 00100000011000110000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00001011 
#  reg_write_data = 00000000000000000000000000000110 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000101 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000110 
#  mem write data = 00000000000000000000000000000101 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000101 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000101 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000011000000000000000000000000000000101 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  11 
# instruction = 00001000000000000000000000000101 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00000101 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000110 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000101 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  11 
# instruction = 00001000000000000000000000000101 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00000101 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000110 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000101 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 0
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   5 
# instruction = 00010000100000110000000000001100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00000110 
#  reg_write_data = 00000000000000000000000000000101 | reg_write_enable = 0 
# alu a = 00000000000000000000000000001011 
# alu b = 00000000000000000000000000000110 
# alu data out (mem addr) = 00000000000000000000000000000101 
#  mem write data = 00000000000000000000000000000110 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000110 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000101 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000010100000000000000000000000000000110 
# read_data = 10000001000000000000000000000000000000011 | fifo_full = 0 | fifo_empty = 0
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   6 
# instruction = 00001100000111110000000000110010 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 1 | pc next = 00110010 
#  reg_write_data = 00000000000000000000000000000110 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000110010 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000110 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000110 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000101 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000110 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  50 
# instruction = 00100000000001010000000000000010 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110011 
#  reg_write_data = 00000000000000000000000000000010 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000010 
#  mem write data = 00000000000000000000000000000101 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000110 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000101 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000000 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001000000000000000000000000000000101 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  50 
# instruction = 00100000000001010000000000000010 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110011 
#  reg_write_data = 00000000000000000000000000000010 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000010 
#  mem write data = 00000000000000000000000000000101 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000110 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000101 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001000000000000000000000000000000101 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  51 
# instruction = 00100000000001110000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110100 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000001 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000110 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000001 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  52 
# instruction = 00100000000001100000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110101 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000001 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000110 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000001 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  53 
# instruction = 00010000101000110000000000111100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00110110 
#  reg_write_data = 11111111111111111111111111111100 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000010 
# alu b = 00000000000000000000000000000110 
# alu data out (mem addr) = 11111111111111111111111111111100 
#  mem write data = 00000000000000000000000000000110 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000110 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111110000000000000000000000000000000110 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  54 
# instruction = 00000000000000110011000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000110 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000110 
# alu data out (mem addr) = 00000000000000000000000000000110 
#  mem write data = 00000000000000000000000000000110 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000110 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000011000000000000000000000000000000110 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 00000000000000000000000000000100 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000110 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000100 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000110 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000110
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000010000000000000000000000000000000010 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 1 
# branch type = 11 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000100 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000100 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000100 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000110 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000100
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000010000000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 00000000000000000000000000000010 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000100 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000010 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000110 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000100
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001000000000000000000000000000000010 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 1 
# branch type = 11 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000010 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000010 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000010 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000110 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000010
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001000000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000010 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000110 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000010
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000010 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 11 | zero flag = 1 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00111001 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000110 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  57 
# instruction = 00010000110000000000000000111100 
# 
# ALU opcode = 0001 
# branch valid = 1 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00111100 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000110 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  60 
# instruction = 00010100000001100000000000111110 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 01 | zero flag = 1 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00111101 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000110 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  61 
# instruction = 00100000000001110000000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111110 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000001 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000110 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000001 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  62 
# instruction = 00111011111111100000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00000111 
#  reg_write_data = 00000000000000000000000000000111 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000110 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000111 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000110 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000011100000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   7 
# instruction = 00010000111000000000000000001010 
# 
# ALU opcode = 0001 
# branch valid = 1 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00001010 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000110 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  10 
# instruction = 00100000011000110000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00001011 
#  reg_write_data = 00000000000000000000000000000111 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000110 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000111 
#  mem write data = 00000000000000000000000000000110 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000110 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000011100000000000000000000000000000110 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  11 
# instruction = 00001000000000000000000000000101 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00000101 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   5 
# instruction = 00010000100000110000000000001100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00000110 
#  reg_write_data = 00000000000000000000000000000100 | reg_write_enable = 0 
# alu a = 00000000000000000000000000001011 
# alu b = 00000000000000000000000000000111 
# alu data out (mem addr) = 00000000000000000000000000000100 
#  mem write data = 00000000000000000000000000000111 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000010000000000000000000000000000000111 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   6 
# instruction = 00001100000111110000000000110010 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 1 | pc next = 00110010 
#  reg_write_data = 00000000000000000000000000000110 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000110010 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000110 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000110 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  50 
# instruction = 00100000000001010000000000000010 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110011 
#  reg_write_data = 00000000000000000000000000000010 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000010 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001000000000000000000000000000000010 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  51 
# instruction = 00100000000001110000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110100 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  52 
# instruction = 00100000000001100000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110101 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  53 
# instruction = 00010000101000110000000000111100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00110110 
#  reg_write_data = 11111111111111111111111111111011 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000010 
# alu b = 00000000000000000000000000000111 
# alu data out (mem addr) = 11111111111111111111111111111011 
#  mem write data = 00000000000000000000000000000111 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111101100000000000000000000000000000111 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  54 
# instruction = 00000000000000110011000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000111 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000111 
# alu data out (mem addr) = 00000000000000000000000000000111 
#  mem write data = 00000000000000000000000000000111 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000011100000000000000000000000000000111 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 00000000000000000000000000000101 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000111 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000101 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000010100000000000000000000000000000010 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 1 
# branch type = 11 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000101 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000101 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000101 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000101
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000010100000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 00000000000000000000000000000011 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000101 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000011 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000101
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001100000000000000000000000000000010 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 1 
# branch type = 11 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000011 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000011 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000011 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000011
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001100000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000011 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000011
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000010 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 1 
# branch type = 11 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000001 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 11111111111111111111111111111111 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000001 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 11111111111111111111111111111111 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111111100000000000000000000000000000010 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 11 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00111001 
#  reg_write_data = 11111111111111111111111111111111 | reg_write_enable = 0 
# alu a = 11111111111111111111111111111111 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 11111111111111111111111111111111 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 11111111111111111111111111111111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111111100000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  57 
# instruction = 00010000110000000000000000111100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00111010 
#  reg_write_data = 11111111111111111111111111111111 | reg_write_enable = 0 
# alu a = 11111111111111111111111111111111 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 11111111111111111111111111111111 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 11111111111111111111111111111111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111111100000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  58 
# instruction = 00100000101001010000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111011 
#  reg_write_data = 00000000000000000000000000000011 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000010 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000011 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 11111111111111111111111111111111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001100000000000000000000000000000010 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  59 
# instruction = 00001000000000000000000000110100 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110100 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 11111111111111111111111111111111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  52 
# instruction = 00100000000001100000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110101 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 11111111111111111111111111111111 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 11111111111111111111111111111111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000111111111111111111111111111111111 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  53 
# instruction = 00010000101000110000000000111100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00110110 
#  reg_write_data = 11111111111111111111111111111100 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000011 
# alu b = 00000000000000000000000000000111 
# alu data out (mem addr) = 11111111111111111111111111111100 
#  mem write data = 00000000000000000000000000000111 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111110000000000000000000000000000000111 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  54 
# instruction = 00000000000000110011000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000111 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000111 
# alu data out (mem addr) = 00000000000000000000000000000111 
#  mem write data = 00000000000000000000000000000111 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000011100000000000000000000000000000111 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 00000000000000000000000000000100 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000111 
# alu b = 00000000000000000000000000000011 
# alu data out (mem addr) = 00000000000000000000000000000100 
#  mem write data = 00000000000000000000000000000011 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000010000000000000000000000000000000011 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 1 
# branch type = 11 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000100 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000100 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000100 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000100
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000010000000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000100 
# alu b = 00000000000000000000000000000011 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000011 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000100
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000011 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 1 
# branch type = 11 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000001 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 11111111111111111111111111111110 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000001 
# alu b = 00000000000000000000000000000011 
# alu data out (mem addr) = 11111111111111111111111111111110 
#  mem write data = 00000000000000000000000000000011 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111111000000000000000000000000000000011 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 11 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00111001 
#  reg_write_data = 11111111111111111111111111111110 | reg_write_enable = 0 
# alu a = 11111111111111111111111111111110 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 11111111111111111111111111111110 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 11111111111111111111111111111110
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111111000000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  57 
# instruction = 00010000110000000000000000111100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00111010 
#  reg_write_data = 11111111111111111111111111111110 | reg_write_enable = 0 
# alu a = 11111111111111111111111111111110 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 11111111111111111111111111111110 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 11111111111111111111111111111110
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111111000000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  58 
# instruction = 00100000101001010000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111011 
#  reg_write_data = 00000000000000000000000000000100 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000011 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000100 
#  mem write data = 00000000000000000000000000000011 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 11111111111111111111111111111110
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000010000000000000000000000000000000011 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  59 
# instruction = 00001000000000000000000000110100 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110100 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000100 
# reg file 6 = 11111111111111111111111111111110
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  52 
# instruction = 00100000000001100000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110101 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 11111111111111111111111111111110 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000100 
# reg file 6 = 11111111111111111111111111111110
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000111111111111111111111111111111110 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  53 
# instruction = 00010000101000110000000000111100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00110110 
#  reg_write_data = 11111111111111111111111111111101 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000100 
# alu b = 00000000000000000000000000000111 
# alu data out (mem addr) = 11111111111111111111111111111101 
#  mem write data = 00000000000000000000000000000111 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000100 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111110100000000000000000000000000000111 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  54 
# instruction = 00000000000000110011000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000111 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000111 
# alu data out (mem addr) = 00000000000000000000000000000111 
#  mem write data = 00000000000000000000000000000111 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000100 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000011100000000000000000000000000000111 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 00000000000000000000000000000011 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000111 
# alu b = 00000000000000000000000000000100 
# alu data out (mem addr) = 00000000000000000000000000000011 
#  mem write data = 00000000000000000000000000000100 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000100 
# reg file 6 = 00000000000000000000000000000111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001100000000000000000000000000000100 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 1 
# branch type = 11 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000011 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000011 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000011 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000100 
# reg file 6 = 00000000000000000000000000000011
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001100000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 11111111111111111111111111111111 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000011 
# alu b = 00000000000000000000000000000100 
# alu data out (mem addr) = 11111111111111111111111111111111 
#  mem write data = 00000000000000000000000000000100 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000100 
# reg file 6 = 00000000000000000000000000000011
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111111100000000000000000000000000000100 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 11 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00111001 
#  reg_write_data = 11111111111111111111111111111111 | reg_write_enable = 0 
# alu a = 11111111111111111111111111111111 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 11111111111111111111111111111111 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000100 
# reg file 6 = 11111111111111111111111111111111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111111100000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  57 
# instruction = 00010000110000000000000000111100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00111010 
#  reg_write_data = 11111111111111111111111111111111 | reg_write_enable = 0 
# alu a = 11111111111111111111111111111111 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 11111111111111111111111111111111 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000100 
# reg file 6 = 11111111111111111111111111111111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111111100000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  58 
# instruction = 00100000101001010000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111011 
#  reg_write_data = 00000000000000000000000000000101 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000100 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000101 
#  mem write data = 00000000000000000000000000000100 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000100 
# reg file 6 = 11111111111111111111111111111111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000010100000000000000000000000000000100 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  59 
# instruction = 00001000000000000000000000110100 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110100 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000101 
# reg file 6 = 11111111111111111111111111111111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  52 
# instruction = 00100000000001100000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110101 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 11111111111111111111111111111111 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000101 
# reg file 6 = 11111111111111111111111111111111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000111111111111111111111111111111111 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  53 
# instruction = 00010000101000110000000000111100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00110110 
#  reg_write_data = 11111111111111111111111111111110 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000101 
# alu b = 00000000000000000000000000000111 
# alu data out (mem addr) = 11111111111111111111111111111110 
#  mem write data = 00000000000000000000000000000111 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000101 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111111000000000000000000000000000000111 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  54 
# instruction = 00000000000000110011000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000111 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000111 
# alu data out (mem addr) = 00000000000000000000000000000111 
#  mem write data = 00000000000000000000000000000111 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000101 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000011100000000000000000000000000000111 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 00000000000000000000000000000010 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000111 
# alu b = 00000000000000000000000000000101 
# alu data out (mem addr) = 00000000000000000000000000000010 
#  mem write data = 00000000000000000000000000000101 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000101 
# reg file 6 = 00000000000000000000000000000111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001000000000000000000000000000000101 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 1 
# branch type = 11 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000010 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000010 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000010 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000101 
# reg file 6 = 00000000000000000000000000000010
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001000000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 11111111111111111111111111111101 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000010 
# alu b = 00000000000000000000000000000101 
# alu data out (mem addr) = 11111111111111111111111111111101 
#  mem write data = 00000000000000000000000000000101 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000101 
# reg file 6 = 00000000000000000000000000000010
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111110100000000000000000000000000000101 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 11 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00111001 
#  reg_write_data = 11111111111111111111111111111101 | reg_write_enable = 0 
# alu a = 11111111111111111111111111111101 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 11111111111111111111111111111101 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000101 
# reg file 6 = 11111111111111111111111111111101
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111110100000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  57 
# instruction = 00010000110000000000000000111100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00111010 
#  reg_write_data = 11111111111111111111111111111101 | reg_write_enable = 0 
# alu a = 11111111111111111111111111111101 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 11111111111111111111111111111101 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000101 
# reg file 6 = 11111111111111111111111111111101
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111110100000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  58 
# instruction = 00100000101001010000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111011 
#  reg_write_data = 00000000000000000000000000000110 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000101 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000110 
#  mem write data = 00000000000000000000000000000101 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000101 
# reg file 6 = 11111111111111111111111111111101
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000011000000000000000000000000000000101 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  59 
# instruction = 00001000000000000000000000110100 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110100 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000110 
# reg file 6 = 11111111111111111111111111111101
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  52 
# instruction = 00100000000001100000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110101 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 11111111111111111111111111111101 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000110 
# reg file 6 = 11111111111111111111111111111101
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000111111111111111111111111111111101 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  53 
# instruction = 00010000101000110000000000111100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00110110 
#  reg_write_data = 11111111111111111111111111111111 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000110 
# alu b = 00000000000000000000000000000111 
# alu data out (mem addr) = 11111111111111111111111111111111 
#  mem write data = 00000000000000000000000000000111 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000110 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111111100000000000000000000000000000111 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  54 
# instruction = 00000000000000110011000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000111 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000111 
# alu data out (mem addr) = 00000000000000000000000000000111 
#  mem write data = 00000000000000000000000000000111 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000110 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000011100000000000000000000000000000111 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000111 
# alu b = 00000000000000000000000000000110 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000110 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000110 
# reg file 6 = 00000000000000000000000000000111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000110 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 1 
# branch type = 11 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000001 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000110 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 11111111111111111111111111111011 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000001 
# alu b = 00000000000000000000000000000110 
# alu data out (mem addr) = 11111111111111111111111111111011 
#  mem write data = 00000000000000000000000000000110 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000110 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111101100000000000000000000000000000110 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 11 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00111001 
#  reg_write_data = 11111111111111111111111111111011 | reg_write_enable = 0 
# alu a = 11111111111111111111111111111011 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 11111111111111111111111111111011 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000110 
# reg file 6 = 11111111111111111111111111111011
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111101100000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  57 
# instruction = 00010000110000000000000000111100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00111010 
#  reg_write_data = 11111111111111111111111111111011 | reg_write_enable = 0 
# alu a = 11111111111111111111111111111011 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 11111111111111111111111111111011 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000110 
# reg file 6 = 11111111111111111111111111111011
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111101100000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  58 
# instruction = 00100000101001010000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111011 
#  reg_write_data = 00000000000000000000000000000111 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000110 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000111 
#  mem write data = 00000000000000000000000000000110 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000110 
# reg file 6 = 11111111111111111111111111111011
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000011100000000000000000000000000000110 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  59 
# instruction = 00001000000000000000000000110100 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110100 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000111 
# reg file 6 = 11111111111111111111111111111011
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  52 
# instruction = 00100000000001100000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110101 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 11111111111111111111111111111011 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000111 
# reg file 6 = 11111111111111111111111111111011
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000111111111111111111111111111111011 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  53 
# instruction = 00010000101000110000000000111100 
# 
# ALU opcode = 0001 
# branch valid = 1 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00111100 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000111 
# alu b = 00000000000000000000000000000111 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000111 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000111 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000111 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  60 
# instruction = 00010100000001100000000000111110 
# 
# ALU opcode = 0001 
# branch valid = 1 
# branch type = 01 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00111110 
#  reg_write_data = 11111111111111111111111111111111 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 11111111111111111111111111111111 
#  mem write data = 00000000000000000000000000000001 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000111 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111111100000000000000000000000000000001 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  62 
# instruction = 00111011111111100000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00000111 
#  reg_write_data = 00000000000000000000000000000111 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000110 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000111 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000111 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000011100000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   7 
# instruction = 00010000111000000000000000001010 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00001000 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000001 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000111 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   8 
# instruction = 10101100010000110000000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00001001 
#  reg_write_data = 00000000000000000000000000000100 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000100 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000100 
#  mem write data = 00000000000000000000000000000111 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000111 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 1 | r_en = 1 | reset 0 | write_data = 10000010000000000000000000000000000000111 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   9 
# instruction = 00100000010000100000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00001010 
#  reg_write_data = 00000000000000000000000000000101 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000100 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000101 
#  mem write data = 00000000000000000000000000000100 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000100 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000111 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000010100000000000000000000000000000100 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  10 
# instruction = 00100000011000110000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00001011 
#  reg_write_data = 00000000000000000000000000001000 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000111 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000001000 
#  mem write data = 00000000000000000000000000000111 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000000111 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000111 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000100000000000000000000000000000000111 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  11 
# instruction = 00001000000000000000000000000101 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00000101 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001000 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000111 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   5 
# instruction = 00010000100000110000000000001100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00000110 
#  reg_write_data = 00000000000000000000000000000011 | reg_write_enable = 0 
# alu a = 00000000000000000000000000001011 
# alu b = 00000000000000000000000000001000 
# alu data out (mem addr) = 00000000000000000000000000000011 
#  mem write data = 00000000000000000000000000001000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001000 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000111 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001100000000000000000000000000001000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   5 
# instruction = 00010000100000110000000000001100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00000110 
#  reg_write_data = 00000000000000000000000000000011 | reg_write_enable = 0 
# alu a = 00000000000000000000000000001011 
# alu b = 00000000000000000000000000001000 
# alu data out (mem addr) = 00000000000000000000000000000011 
#  mem write data = 00000000000000000000000000001000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001000 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000111 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001100000000000000000000000000001000 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 0
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   6 
# instruction = 00001100000111110000000000110010 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 1 | pc next = 00110010 
#  reg_write_data = 00000000000000000000000000000110 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000110010 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000110 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001000 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000111 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000110 
# read_data = 10000001100000000000000000000000000000101 | fifo_full = 0 | fifo_empty = 0
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  50 
# instruction = 00100000000001010000000000000010 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110011 
#  reg_write_data = 00000000000000000000000000000010 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000010 
#  mem write data = 00000000000000000000000000000111 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001000 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000111 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001000000000000000000000000000000111 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  51 
# instruction = 00100000000001110000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110100 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000001 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001000 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000000 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000001 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  51 
# instruction = 00100000000001110000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110100 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000001 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001000 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000001 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  52 
# instruction = 00100000000001100000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110101 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000001 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001000 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000001 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  53 
# instruction = 00010000101000110000000000111100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00110110 
#  reg_write_data = 11111111111111111111111111111010 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000010 
# alu b = 00000000000000000000000000001000 
# alu data out (mem addr) = 11111111111111111111111111111010 
#  mem write data = 00000000000000000000000000001000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001000 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111101000000000000000000000000000001000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  54 
# instruction = 00000000000000110011000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000001000 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000001000 
# alu data out (mem addr) = 00000000000000000000000000001000 
#  mem write data = 00000000000000000000000000001000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001000 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000100000000000000000000000000000001000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 00000000000000000000000000000110 | reg_write_enable = 1 
# alu a = 00000000000000000000000000001000 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000110 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001000 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000001000
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000011000000000000000000000000000000010 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 1 
# branch type = 11 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000110 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000110 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000110 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001000 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000110
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000011000000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 00000000000000000000000000000100 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000110 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000100 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001000 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000110
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000010000000000000000000000000000000010 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 1 
# branch type = 11 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000100 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000100 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000100 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001000 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000100
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000010000000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 00000000000000000000000000000010 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000100 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000010 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001000 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000100
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001000000000000000000000000000000010 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 1 
# branch type = 11 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000010 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000010 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000010 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001000 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000010
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001000000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000010 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001000 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000010
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000010 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 11 | zero flag = 1 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00111001 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001000 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  57 
# instruction = 00010000110000000000000000111100 
# 
# ALU opcode = 0001 
# branch valid = 1 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00111100 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001000 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  60 
# instruction = 00010100000001100000000000111110 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 01 | zero flag = 1 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00111101 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001000 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  61 
# instruction = 00100000000001110000000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111110 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000001 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001000 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000001 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  62 
# instruction = 00111011111111100000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00000111 
#  reg_write_data = 00000000000000000000000000000111 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000110 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000111 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001000 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000011100000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   7 
# instruction = 00010000111000000000000000001010 
# 
# ALU opcode = 0001 
# branch valid = 1 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00001010 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001000 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  10 
# instruction = 00100000011000110000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00001011 
#  reg_write_data = 00000000000000000000000000001001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000001000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000001001 
#  mem write data = 00000000000000000000000000001000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001000 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000100100000000000000000000000000001000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  11 
# instruction = 00001000000000000000000000000101 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00000101 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   5 
# instruction = 00010000100000110000000000001100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00000110 
#  reg_write_data = 00000000000000000000000000000010 | reg_write_enable = 0 
# alu a = 00000000000000000000000000001011 
# alu b = 00000000000000000000000000001001 
# alu data out (mem addr) = 00000000000000000000000000000010 
#  mem write data = 00000000000000000000000000001001 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001000000000000000000000000000001001 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   6 
# instruction = 00001100000111110000000000110010 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 1 | pc next = 00110010 
#  reg_write_data = 00000000000000000000000000000110 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000110010 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000110 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000110 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  50 
# instruction = 00100000000001010000000000000010 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110011 
#  reg_write_data = 00000000000000000000000000000010 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000010 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001000000000000000000000000000000010 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  51 
# instruction = 00100000000001110000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110100 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  52 
# instruction = 00100000000001100000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110101 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  53 
# instruction = 00010000101000110000000000111100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00110110 
#  reg_write_data = 11111111111111111111111111111001 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000010 
# alu b = 00000000000000000000000000001001 
# alu data out (mem addr) = 11111111111111111111111111111001 
#  mem write data = 00000000000000000000000000001001 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111100100000000000000000000000000001001 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  54 
# instruction = 00000000000000110011000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000001001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000001001 
# alu data out (mem addr) = 00000000000000000000000000001001 
#  mem write data = 00000000000000000000000000001001 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000100100000000000000000000000000001001 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 00000000000000000000000000000111 | reg_write_enable = 1 
# alu a = 00000000000000000000000000001001 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000111 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000001001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000011100000000000000000000000000000010 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 1 
# branch type = 11 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000111 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000111 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000111 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000011100000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 00000000000000000000000000000101 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000111 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000101 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000010100000000000000000000000000000010 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 1 
# branch type = 11 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000101 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000101 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000101 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000101
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000010100000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 00000000000000000000000000000011 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000101 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000011 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000101
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001100000000000000000000000000000010 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 1 
# branch type = 11 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000011 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000011 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000011 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000011
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001100000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000011 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000011
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000010 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 1 
# branch type = 11 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000001 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 11111111111111111111111111111111 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000001 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 11111111111111111111111111111111 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111111100000000000000000000000000000010 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 11 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00111001 
#  reg_write_data = 11111111111111111111111111111111 | reg_write_enable = 0 
# alu a = 11111111111111111111111111111111 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 11111111111111111111111111111111 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 11111111111111111111111111111111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111111100000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  57 
# instruction = 00010000110000000000000000111100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00111010 
#  reg_write_data = 11111111111111111111111111111111 | reg_write_enable = 0 
# alu a = 11111111111111111111111111111111 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 11111111111111111111111111111111 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 11111111111111111111111111111111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111111100000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  58 
# instruction = 00100000101001010000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111011 
#  reg_write_data = 00000000000000000000000000000011 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000010 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000011 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 11111111111111111111111111111111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001100000000000000000000000000000010 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  59 
# instruction = 00001000000000000000000000110100 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110100 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 11111111111111111111111111111111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  52 
# instruction = 00100000000001100000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110101 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 11111111111111111111111111111111 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 11111111111111111111111111111111
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000111111111111111111111111111111111 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  53 
# instruction = 00010000101000110000000000111100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00110110 
#  reg_write_data = 11111111111111111111111111111010 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000011 
# alu b = 00000000000000000000000000001001 
# alu data out (mem addr) = 11111111111111111111111111111010 
#  mem write data = 00000000000000000000000000001001 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111101000000000000000000000000000001001 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  54 
# instruction = 00000000000000110011000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000001001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000001001 
# alu data out (mem addr) = 00000000000000000000000000001001 
#  mem write data = 00000000000000000000000000001001 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000100100000000000000000000000000001001 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 00000000000000000000000000000110 | reg_write_enable = 1 
# alu a = 00000000000000000000000000001001 
# alu b = 00000000000000000000000000000011 
# alu data out (mem addr) = 00000000000000000000000000000110 
#  mem write data = 00000000000000000000000000000011 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000001001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000011000000000000000000000000000000011 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 1 
# branch type = 11 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000110 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000110 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000110 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000110
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000011000000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 00000000000000000000000000000011 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000110 
# alu b = 00000000000000000000000000000011 
# alu data out (mem addr) = 00000000000000000000000000000011 
#  mem write data = 00000000000000000000000000000011 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000110
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001100000000000000000000000000000011 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 1 
# branch type = 11 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000011 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000011 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000011 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000011
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001100000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000011 
# alu b = 00000000000000000000000000000011 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000011 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000011
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000011 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 11 | zero flag = 1 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00111001 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  57 
# instruction = 00010000110000000000000000111100 
# 
# ALU opcode = 0001 
# branch valid = 1 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00111100 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  60 
# instruction = 00010100000001100000000000111110 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 01 | zero flag = 1 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00111101 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  61 
# instruction = 00100000000001110000000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111110 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000001 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000001 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  62 
# instruction = 00111011111111100000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00000111 
#  reg_write_data = 00000000000000000000000000000111 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000110 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000111 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000011100000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   7 
# instruction = 00010000111000000000000000001010 
# 
# ALU opcode = 0001 
# branch valid = 1 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00001010 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  10 
# instruction = 00100000011000110000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00001011 
#  reg_write_data = 00000000000000000000000000001010 | reg_write_enable = 1 
# alu a = 00000000000000000000000000001001 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000001010 
#  mem write data = 00000000000000000000000000001001 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001001 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000101000000000000000000000000000001001 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  11 
# instruction = 00001000000000000000000000000101 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00000101 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   5 
# instruction = 00010000100000110000000000001100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00000110 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 0 
# alu a = 00000000000000000000000000001011 
# alu b = 00000000000000000000000000001010 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000001010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000001010 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   6 
# instruction = 00001100000111110000000000110010 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 1 | pc next = 00110010 
#  reg_write_data = 00000000000000000000000000000110 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000110010 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000110 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000110 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  50 
# instruction = 00100000000001010000000000000010 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110011 
#  reg_write_data = 00000000000000000000000000000010 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000010 
#  mem write data = 00000000000000000000000000000011 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000011 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001000000000000000000000000000000011 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  51 
# instruction = 00100000000001110000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110100 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  52 
# instruction = 00100000000001100000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110101 
#  reg_write_data = 00000000000000000000000000000001 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000001 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000100000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  53 
# instruction = 00010000101000110000000000111100 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 1 | branch = 1
# jump dst = 0 | pc next = 00110110 
#  reg_write_data = 11111111111111111111111111111000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000010 
# alu b = 00000000000000000000000000001010 
# alu data out (mem addr) = 11111111111111111111111111111000 
#  mem write data = 00000000000000000000000000001010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 01111100000000000000000000000000000001010 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  54 
# instruction = 00000000000000110011000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000001010 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000001010 
# alu data out (mem addr) = 00000000000000000000000000001010 
#  mem write data = 00000000000000000000000000001010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000001
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000101000000000000000000000000000001010 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 00000000000000000000000000001000 | reg_write_enable = 1 
# alu a = 00000000000000000000000000001010 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000001000 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000001010
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000100000000000000000000000000000000010 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 1 
# branch type = 11 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000001000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000001000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000001000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000001000
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000100000000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 00000000000000000000000000000110 | reg_write_enable = 1 
# alu a = 00000000000000000000000000001000 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000110 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000001000
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000011000000000000000000000000000000010 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 1 
# branch type = 11 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000110 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000110 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000110 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000110
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000011000000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 00000000000000000000000000000100 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000110 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000100 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000110
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000010000000000000000000000000000000010 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 1 
# branch type = 11 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000100 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000100 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000100 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000100
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000010000000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 00000000000000000000000000000010 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000100 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000010 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000100
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001000000000000000000000000000000010 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 1 
# branch type = 11 | zero flag = 0 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00110111 
#  reg_write_data = 00000000000000000000000000000010 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000010 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000010 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000010
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000001000000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  55 
# instruction = 00000000110001010011000000000001 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111000 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000010 
# alu b = 00000000000000000000000000000010 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000010
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000010 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  56 
# instruction = 00011100110000000000000000110111 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 11 | zero flag = 1 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00111001 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  57 
# instruction = 00010000110000000000000000111100 
# 
# ALU opcode = 0001 
# branch valid = 1 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00111100 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  60 
# instruction = 00010100000001100000000000111110 
# 
# ALU opcode = 0001 
# branch valid = 0 
# branch type = 01 | zero flag = 1 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00111101 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  61 
# instruction = 00100000000001110000000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00111110 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000001 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000001 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000001 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  62 
# instruction = 00111011111111100000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00000111 
#  reg_write_data = 00000000000000000000000000000111 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000110 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000000111 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000011100000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   7 
# instruction = 00010000111000000000000000001010 
# 
# ALU opcode = 0001 
# branch valid = 1 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00001010 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  10 
# instruction = 00100000011000110000000000000001 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 0 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00001011 
#  reg_write_data = 00000000000000000000000000001011 | reg_write_enable = 1 
# alu a = 00000000000000000000000000001010 
# alu b = 00000000000000000000000000000001 
# alu data out (mem addr) = 00000000000000000000000000001011 
#  mem write data = 00000000000000000000000000001010 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001010 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000101100000000000000000000000000001010 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  11 
# instruction = 00001000000000000000000000000101 
# 
# ALU opcode = 1111 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00000101 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001011 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =   5 
# instruction = 00010000100000110000000000001100 
# 
# ALU opcode = 0001 
# branch valid = 1 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 1
# jump dst = 0 | pc next = 00001100 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 0 
# alu a = 00000000000000000000000000001011 
# alu b = 00000000000000000000000000001011 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000001011 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001011 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000001011 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  12 
# instruction = 00000000000000000000000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00001101 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001011 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  13 
# instruction = 00000000000000000000000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00001110 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001011 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 1 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# rom_address =  13 
# instruction = 00000000000000000000000000000000 
# 
# ALU opcode = 0000 
# branch valid = 0 
# branch type = 00 | zero flag = 1 | sign flag = 0 | branch = 0
# jump dst = 0 | pc next = 00001110 
#  reg_write_data = 00000000000000000000000000000000 | reg_write_enable = 1 
# alu a = 00000000000000000000000000000000 
# alu b = 00000000000000000000000000000000 
# alu data out (mem addr) = 00000000000000000000000000000000 
#  mem write data = 00000000000000000000000000000000 
#  
# reg file 0 = 00000000000000000000000000000000 
# reg file 1 = 00000000000000000000000000001010 
# reg file 2 = 00000000000000000000000000000101 
# reg file 3 = 00000000000000000000000000001011 
# reg file 4 = 00000000000000000000000000001011 
# reg file 5 = 00000000000000000000000000000010 
# reg file 6 = 00000000000000000000000000000000
# reg file 7 = 00000000000000000000000000000000 
# reg file 31 = 00000000000000000000000000000110 
#  
# memory 0: 00000000000000000000000000001010 
# memory 1: 00000000000000000000000000000010 
# memory 2: 00000000000000000000000000000011 
# memory 3: 00000000000000000000000000000101 
# memory 4: 00000000000000000000000000000111 
# memory 5: 00000000000000000000000000000000 
# memory 6: 00000000000000000000000000000000 
# memory 7: 00000000000000000000000000000000 
# memory 8: 00000000000000000000000000000000 
#  
#  Async FIFO (p_to_ram): 
#  w_en = 0 | r_en = 0 | reset 0 | write_data = 00000000000000000000000000000000000000000 
# read_data = 10000010000000000000000000000000000000111 | fifo_full = 0 | fifo_empty = 1
#  
# Async FIFO (ram_to_p): 
#  w_en = 0 | r_en = 0 | reset 0 | write_data = zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 
# read_data = 00000000000000000000000000001010 | fifo_full = 0 | fifo_empty = 1
# 
# 
# Prime up to N operation took: 1710 ns
# 
# ** Note: $stop    : C:/Users/andre/OneDrive/Documents/VScode/ecse_398_cdc/ecse398cdc/testbenches/soc_async_prime_tb.sv(268)
#    Time: 1841 ns  Iteration: 0  Instance: /soc_async_prime_tb
# Break in Module soc_async_prime_tb at C:/Users/andre/OneDrive/Documents/VScode/ecse_398_cdc/ecse398cdc/testbenches/soc_async_prime_tb.sv line 268
# End time: 13:33:51 on Dec 04,2024, Elapsed time: 0:12:11
# Errors: 0, Warnings: 1
